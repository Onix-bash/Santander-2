name: 'Manual Validation'

on:
  workflow_dispatch:
    inputs:
      modules_to_validate:
        description: List of modules to validate (space separated). If left blank then all modules will get validated
        type: string
      environment:
        description: Environment
        type: environment
        required: true
      test_level:
        description: Apex Unit Tests Level
        type: choice
        required: true
        options:
          - NoTestRun
          - RunAllTestsInOrg
          - RunLocalTests
          - RunSpecifiedTests
        default: RunLocalTests  
      specified_tests:
        description: Apex Unit Tests (space separated). Keep input empty if you didn't select RunSpecifiedTests
        type: string
        required: false
  workflow_call:
    secrets:
        SFDX_AUTH_URL:
          required: false
    inputs:
      environment:
        description: Environment
        type: string
        required: true
      modules_to_validate:
        description: List of modules to validate (space separated). If left blank then all modules will get validated
        required: true
        type: string
      base_ref:
        description: Ref to compare (usually "develop"); Used to generate delta package
        required: false
        type: string
      test_level:
        description: Apex Unit Tests Level
        required: false
        type: string
      specified_tests:
        description: Apex Unit Tests (space separated). Keep input empty if you didn't select RunSpecifiedTests
        required: false
        type: string  
      is_release_branch:
        description: Indicates if this is a release branch
        type: boolean
        required: false
jobs:
  validate-changes:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      WORKING_BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      SF_CLI_VERSION: ${{ vars.SF_CLI_VERSION }}
      SKIP_ORG_INTERACTION: ${{ vars.SKIP_ORG_INTERACTION }}
      # Sets the deployment destination from sfdx-project.json
      SF_APPLY_REPLACEMENTS_ON_CONVERT: ${{ vars.SF_APPLY_REPLACEMENTS_ON_CONVERT }}
      API_MORTGAGE_ONBOARDING_PASSTHRU: ${{ vars.API_MORTGAGE_ONBOARDING_PASSTHRU }}
      SEVERITY: ${{ vars.SEVERITY }}
      IGNORED_SCAN_MODULES: ${{ vars.IGNORED_SCAN_MODULES }}
      COMMUNITY_TO_PUBLISHING: ${{ vars.COMMUNITY_TO_PUBLISHING}}
    outputs:
      should_notify: ${{ steps.check.outputs.should_notify }} 
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

#      - name: Validate src-temp folder changes
#        id: temp_folder
#        run: |
#          chmod +x ./devops-scripts/tempFolder.sh
#          ./devops-scripts/tempFolder.sh

      - name: Install Salesforce CLI
        run: npm install @salesforce/cli@${SF_CLI_VERSION} --global

#      - name: Install JS dependencies
#        run: npm ci
#
#      - name: Install SFDX Code Analyser
#        run: sf plugins install @salesforce/sfdx-scanner@4.2.0
#
#      - name: Run Code Analyser
#        id: code_analyser
#        run: |
#          chmod +x ./devops-scripts/runScanner.sh
#          ./devops-scripts/runScanner.sh ${{ inputs.modules_to_validate }}
#
#      - name: Install Flow Analyser
#        run: echo Y | sf plugins install lightning-flow-scanner
#
#      - name: Run Flow Analyser
#        continue-on-error: true
#        id: flow_analyser
#        run: |
#          chmod +x ./devops-scripts/runFlowScanner.sh
#          ./devops-scripts/runFlowScanner.sh ${{ inputs.modules_to_validate }}

      - name: Authenticate
        id: auth
        env:
          SFDXAUTHURL: ${{ secrets.SFDX_AUTH_URL }}
        run:  |
          chmod +x ./devops-scripts/authenticate.sh
          ./devops-scripts/authenticate.sh --set-default

      - name: Publish Community
        if: ${{ inputs.is_release_branch && env.COMMUNITY_TO_PUBLISHING != '' && env.COMMUNITY_TO_PUBLISHING != ' ' }}
        run: |
          echo "$COMMUNITY_TO_PUBLISHING"
          IFS=$'\n' read -r -d '' -a COMMUNITIES_ARRAY <<< "$(echo "$COMMUNITY_TO_PUBLISHING" | sed '/^\s*$/d' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
          for community_name in "${COMMUNITIES_ARRAY[@]}"; do
            echo "Publishing $community_name"
            result=$(sf community publish --name "$community_name")
            echo "$result"
          done

#  IFS=',' read -r -a COMMUNITIES_ARRAY <<< "$(echo "$COMMUNITY_TO_PUBLISHING" | sed 's/[[:space:]]*,[[:space:]]*/,/g')"  # Comma separated
#      - name: Generate delta package
#        if: ${{ inputs.base_ref != '' }}
#        run: |
#          echo y | sf plugins install sfdx-git-delta
#          sf sgd source delta --from ${{ inputs.base_ref }} --to origin/$WORKING_BRANCH_NAME --output ./src --source ./src
#
#      - name: Set Apex Tests Level
#        if: ${{ inputs.test_level }}
#        env:
#          IS_RELEASE_BRANCH: ${{ inputs.is_release_branch }}
#        run: |
#          chmod +x ./devops-scripts/setApexUnitTestsToRun.sh
#          ./devops-scripts/setApexUnitTestsToRun.sh "${{ inputs.test_level }}" "${{ inputs.specified_tests }}" # Set TEST_LEVEL and SPECIFIED_TESTS to GITHUB_ENV
#
#      - name: Validate Changes on ${{ inputs.environment }}
#        id: validate_changes
#        env:
#          TEST_LEVEL: ${{ env.TEST_LEVEL }}
#          SPECIFIED_TESTS: ${{ env.SPECIFIED_TESTS }}
#        run: |
#          git config --global --add safe.directory /__w/mortgagesfdc-homes-crm/mortgagesfdc-homes-crm
#          chmod +x ./devops-scripts/includeChangedBREMetadata.sh
#          ./devops-scripts/includeChangedBREMetadata.sh
#          chmod +x ./devops-scripts/runValidations.sh
#          ./devops-scripts/runValidations.sh ${{ inputs.modules_to_validate }}
#
#      - name: Cancel Job
#        id: cancel
#        if: ${{ cancelled() }}
#        run: |
#          chmod +x ./devops-scripts/cancelJob.sh
#          ./devops-scripts/cancelJob.sh  ${{steps.validate_changes.outputs.deployment_id}}
#
#      - name: Check failure
#        id: check
#        if: failure() && (steps.auth.outcome == 'failure' || steps.cancel.outcome == 'failure')
#        run: echo "should_notify=true" >> $GITHUB_OUTPUT
#
#  notify:
#    runs-on: ubuntu-latest
#    needs: validate-changes
#    if: always()
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Send Teams notification
#        if: ${{ needs.validate-changes.outputs.should_notify == 'true' }}
#        run: |
#          chmod +x ./devops-scripts/runTeamsNotification.sh
#          ./devops-scripts/runTeamsNotification.sh
#        env:
#          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
#          GITHUB_REF: ${{ github.ref }}
#          GITHUB_URL: ${{ github.server_url }}
#          GITHUB_REPO: ${{ github.repository }}
#          GITHUB_RUN: ${{ github.run_id }}
