name: 'Validation using Scratch'
on:
  pull_request:

jobs:
  validate-changes:
    name: CI Org Validation
    runs-on: ubuntu-latest
    container:
      image: salesforce/cli:latest-full
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BRANCH_REF: ${{ github.ref }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

#      - name: Validate src-temp folder changes
#        run: |
#          chmod +x ./devops-scripts/tempFolder.sh
#          ./devops-scripts/tempFolder.sh
#
#      - name: Validate SFDX health
#        run: sf -v
#
#      - name: Get Changed Modules
#        id: detect_changes
#        run: |
#          chmod +x ./devops-scripts/findChangedModules.sh
#          ./devops-scripts/findChangedModules.sh
#          deleted_files=$(git diff origin/$GITHUB_BASE_REF --name-status --diff-filter=D)
#
#      - name: Install SFDX Code Analyser
#        run: sf plugins install @salesforce/sfdx-scanner@4.2.0
#
#      - name: Run SFDX Code Analyser
#        run: |
#          chmod +x ./devops-scripts/runScanner.sh
#          ./devops-scripts/runScanner.sh ${{steps.detect_changes.outputs.changed_modules}}
#
#      - name: Show Scan Results on PR
#        uses: actions/github-script@v7
#        if: always()
#        with:
#          script: |
#            const script = require('./devops-scripts/showScanPR.js')
#            await script({ github, context });
#
#      - name: Install Flow Analyser
#        run: echo Y | sf plugins install lightning-flow-scanner
#
#      - name: Run Flow Analyser
#        run: |
#          chmod +x ./devops-scripts/runFlowScanner.sh
#          ./devops-scripts/runFlowScanner.sh ${{steps.detect_changes.outputs.changed_modules}}
#
#      - name: Authenticate CI-Org
#        env:
#          ENCODED_SECRET: ${{ inputs.auth_url }}
#        run: |
#          export SFDXAUTHURL=$(echo $ENCODED_SECRET | base64 -di | tr -d '\n')
#          chmod +x ./devops-scripts/authenticate.sh
#          ./devops-scripts/authenticate.sh "--alias=CI-Org --set-default"
#
#      - name: Get CI-Org Info
#        id: ci_org_info
#        run: |
#          org_info=$(sf org display --verbose --json --target-org CI-Org | sed s/\\\\n//g)
#          org_id=$(echo "$org_info" | jq -r '.result.id')
#          echo "org_id=$org_id" >> "$GITHUB_OUTPUT"
#
#      - name: Restore Source Tracking
#        uses: actions/cache/restore@v4
#        with:
#          key: source-tracking-${{ steps.ci_org_info.outputs.org_id }}
#          path: |
#            .sf
#            .sfdx
#
#      - name: Re-Authenticate CI-Org
#        env:
#          ENCODED_SECRET: ${{ inputs.auth_url }}
#        run: |
#          export SFDXAUTHURL=$(echo $ENCODED_SECRET | base64 -di | tr -d '\n')
#          chmod +x ./devops-scripts/authenticate.sh
#          ./devops-scripts/authenticate.sh "--alias=CI-Org --set-default"

          # - name: Deploy sources
          # run: |
          # chmod +x ./devops-scripts/includeChangedESIntoPackage.sh
          # ./devops-scripts/includeChangedESIntoPackage.sh
          # sf project deploy start --ignore-conflicts --target-org CI-Org --verbose --ignore-warnings
          # git checkout -- .forceignore

          # - name: Deploy Module Changes to Ci-Org
          # id: deploy_changes
          # run: |
          # chmod +x ./devops-scripts/runDeploymentsToScratchOrg.sh
          # ./devops-scripts/runDeploymentsToScratchOrg.sh ${{ steps.detect_changes.outputs.changed_modules }}

          # - name: Run Unit Tests
          # shell: bash
          # run: |
          # chmod +x ./devops-scripts/runApexTests.sh
          # ./devops-scripts/runApexTests.sh

      - name: Validate Full Metadata
        id: full_validate
        run: |
          echo "Simulating a failure condition"
          exit 1

      - name: Set Output Based on Step Result
        id: full_validate_result
        if: ${{ failure() && steps.full_validate.outcome == 'failure' }}
        run: echo "full_validation_failed=true" >> $GITHUB_OUTPUT

    outputs:
      full_validation_failed: ${{ steps.full_validate_result.outputs.full_validation_failed }}

  capture-error-message:
    name: Capture Error message
    runs-on: ubuntu-latest
    container:
      image: salesforce/cli:latest-full
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_TITLE: ${{ github.event.pull_request.title }}
      PR_LINK: ${{ github.event.pull_request.html_url }}
      environment: "MaxDevOps"
    needs: [ validate-changes ]
    if: ${{ always() && needs.validate-changes.outputs.full_validation_failed == 'true' && ! contains(needs.*.result, 'cancelled') }}
    steps:
      - name: Set Error Log
        run: |
          echo "run script set error"
          chmod +x ./devops-scripts/es-exclude-forceignore.sh
          ./devops-scripts/es-exclude-forceignore.sh "${{ env.BRANCH_REF }}" "original/develop"

