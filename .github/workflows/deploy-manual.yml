name: 'Manual Deployment'
on:
  workflow_dispatch:
    inputs:
      modules_to_deploy:
        description: List of modules to deploy (space separated). If left blank then all modules will get deployed
        type: string
      environment:
        description: Environment
        type: environment
        required: true
      test_level:
        description: Apex Unit Tests Level
        type: choice
        required: true
        options:
          - NoTestRun
          - RunAllTestsInOrg
          - RunLocalTests
          - RunSpecifiedTests
        default: RunLocalTests  
      specified_tests:
        description: Apex Unit Tests (space separated). Keep input empty if you didn't select RunSpecifiedTests
        type: string
        required: false

  workflow_call:
    inputs:
      environment:
        description: Environment
        type: string
        required: true
      modules_to_deploy:
        description: List of modules to deploy (space separated). If left blank then all modules will get deployed
        required: true
        type: string
      base_ref:
        description: Ref to compare (usually "develop"); Used to generate delta package
        required: false
        type: string
      test_level:
        description: Apex Unit Tests Level
        required: false
        type: string
      specified_tests:
        description: Apex Unit Tests (space separated). Keep input empty if you didn't select RunSpecifiedTests
        required: false
        type: string  
      is_release_branch:
        description: Indicates if this is a release branch
        type: boolean
        required: false    

jobs:
  deploy-changes:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      WORKING_BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      SF_CLI_VERSION: ${{ vars.SF_CLI_VERSION }}
      SKIP_ORG_INTERACTION: ${{ vars.SKIP_ORG_INTERACTION }}
      # Sets the deployment destination from sfdx-project.json
      SF_APPLY_REPLACEMENTS_ON_CONVERT: ${{ vars.SF_APPLY_REPLACEMENTS_ON_CONVERT }}
      API_MORTGAGE_ONBOARDING_PASSTHRU: ${{ vars.API_MORTGAGE_ONBOARDING_PASSTHRU }}
    outputs:
      should_notify: ${{ steps.check.outputs.should_notify }}  
    steps:
      - name: Validate ServiceNow Ticket
        uses: santandergroup-uk/alm-openshift-reusable-workflows/.github/actions/snow@ctask_proxy
        with:
          snow-reference: ${{ vars.SNOW_REFERENCE }}
          project-name: ${{ vars.SNOW_PROJECT_NAME }}
          snow-user: ${{ secrets.SNOW_SVC_USER }}
          snow-pass: ${{ secrets.SNOW_SVC_PASS }}
          snow-url: ${{ secrets.SNOW_SVC_URL }}
          region: ${{ vars.SNOW_REGION }}
        if: ${{ vars.IS_DEPLOY_DESTINATION_PRODUCTION == 'true' }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Salesforce CLI
        run: npm install @salesforce/cli@${SF_CLI_VERSION} --global

      - name: Install JS dependencies
        run: npm ci

      - name: Generate delta package
        if: ${{ inputs.base_ref != '' }}
        run: |
          echo y | sf plugins install sfdx-git-delta
          sf sgd source delta --from ${{ inputs.base_ref }} --to origin/$WORKING_BRANCH_NAME --output ./src --source ./src

      - name: Authenticate
        id: auth
        env:
          SFDXAUTHURL: ${{secrets.SFDX_AUTH_URL}}
        run: |
          chmod +x ./devops-scripts/authenticate.sh
          ./devops-scripts/authenticate.sh --set-default
          
      - name: Set Apex Tests Level
        if: ${{ inputs.test_level }}
        env:
          IS_RELEASE_BRANCH: ${{ inputs.is_release_branch }}
        run: |
          chmod +x ./devops-scripts/setApexUnitTestsToRun.sh
          ./devops-scripts/setApexUnitTestsToRun.sh "${{ inputs.test_level }}" "${{ inputs.specified_tests }}" # Set TEST_LEVEL and SPECIFIED_TESTS to GITHUB_ENV

      - name: Deploy Changes to ${{ github.event.inputs.environment }}
        id: deploy_changes
        env:
          TEST_LEVEL: ${{ env.TEST_LEVEL }}
          SPECIFIED_TESTS: ${{ env.SPECIFIED_TESTS }}
        run: |
          git config --global --add safe.directory /__w/mortgagesfdc-homes-crm/mortgagesfdc-homes-crm
          chmod +x ./devops-scripts/includeChangedBREMetadata.sh 
          ./devops-scripts/includeChangedBREMetadata.sh
          chmod +x ./devops-scripts/runDeployments.sh 
          ./devops-scripts/runDeployments.sh ${{ github.event.inputs.modules_to_deploy }}
          
      - name: Create CalculationMatrixRow(s)
        if: ${{ steps.deploy_changes.outputs.decision_matrix_files != '' }}
        run: |
          chmod +x ./devops-scripts/createDecisionMatrixDefinitionRows.sh 
          ./devops-scripts/createDecisionMatrixDefinitionRows.sh ${{ steps.deploy_changes.outputs.decision_matrix_files }}     

      - name: Cancel Job
        id: cancel
        if: ${{ cancelled() }}
        run: |
          chmod +x ./devops-scripts/cancelJob.sh
          ./devops-scripts/cancelJob.sh  ${{steps.deploy_changes.outputs.deployment_id}}

      - name: Check failure
        id: check
        if: failure() && (steps.auth.outcome == 'failure' || steps.cancel.outcome == 'failure')
        run: echo "should_notify=true" >> $GITHUB_OUTPUT    
  
  notify-teams:
    runs-on: ubuntu-latest
    needs: deploy-changes
    if: always()
      
    steps:
      - uses: actions/checkout@v4
         
      - name: Send Teams notification
        if: ${{ needs.deploy-changes.outputs.should_notify == 'true' }}
        run: |
          chmod +x ./devops-scripts/runTeamsNotification.sh
          ./devops-scripts/runTeamsNotification.sh
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_URL: ${{ github.server_url }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_RUN: ${{ github.run_id }}
  notify-kafka:
    needs: deploy-changes
    if: always()
    uses: ./.github/workflows/notify-kafka.yml
    with:
      deploy_environment: ${{ inputs.environment }}
      workflow_status: ${{ needs.deploy-changes.result }}