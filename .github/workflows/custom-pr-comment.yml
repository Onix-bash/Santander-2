name: Custom Scanner PMD

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    name: Scan Results
    container:
      image: salesforce/cli:latest-full
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install SFDX Code Analyser
        env:
          PULL_REQUEST_HEAD_REF: "${{ github.event.pull_request.head.ref }}"
          PULL_REQUEST_BASE_REF: "${{ github.event.pull_request.base.ref }}"
          src_diff_files: ${{ env.src_files }}
        run: |
          sf plugins install @salesforce/sfdx-scanner@4.2.0
          chmod +x ./devops-scripts/scan-pull-request.sh
          ./devops-scripts/scan-pull-request.sh

      - name: Add comment to PR files
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const prNumber = context.payload.pull_request.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            try {
              // Read the JSON report
              const report = JSON.parse(fs.readFileSync('output/report.json', 'utf-8'));
              console.log("report: ", report[0].violations);

              // Get list of files changed in the PR
              const { data: files } = await github.rest.pulls.listFiles({
                owner: repoOwner,
                repo: repoName,
                pull_number: prNumber
              });
              
              // Create a map of file changes
              const fileChanges = {};
              for (const file of files) {
                fileChanges[file.filename] = file;
              }

              for (const file of report) {
                const fileName = file.fileName.replace('/__w/Santander-2/Santander-2/', '');
            
                console.log("file: ", file);
                const violations = file.violations; // Access the violations array

                for (const violation of violations) {
                  console.log("violation: ", violation);

                  const message = `**${violation.ruleName}**: ${violation.message.trim()}\n**Category**: ${violation.category}\n**Severity**: ${violation.severity}`;
                  const line = violation.line;

                  // Check if the file is part of the PR
                  if (fileChanges[fileName]) {
            console.log('fileChanges[fileName]',fileChanges[fileName]);
            const fileFromPR = files.forEach(file => console.log(file.fileName));

#                    const addedLineInfo = fileFromPR.patch.split('\n').map((line, index) => ({ line, index }))
#                      .find(lineObj => lineObj.line.startsWith('+') && !lineObj.line.startsWith('+++'));
#                    if (addedLineInfo) {
#                  const position = addedLineInfo.index;
#                  const diffHunk = fileFromPR.patch.split('\n').slice(0, position + 1).join('\n');
#                      await github.rest.pulls.createReviewComment({
#                      owner: repoOwner,
#                      repo: repoName,
#                      pull_number: prNumber,
#                      body: message,
#                      commit_id: context.payload.pull_request.head.sha,
#                      path: path,
#                      position: position,
#                      side: 'RIGHT',
#                      start_side: 'RIGHT',
#                      diff_hunk: diffHunk
#                      });
#                    }
#                  } else {
#                    console.log(`File ${fileName} not found in the pull request.`);
                  }
                }
              }
            } catch (error) {
              console.log(`Error: ${error.message}`);
            }